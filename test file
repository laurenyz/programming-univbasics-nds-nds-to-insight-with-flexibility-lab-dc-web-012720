def movies_with_director_key(name, movies_collection)
  # GOAL: collecting all movie hashes into an array
  #
  # INPUT:
  # * name: A director's name
  # * movies_collection: A o H
  #
  # RETURN:A o H including :director_name
  
result = []
index = 0
  while index < movies_collection.length
    result << movie_with_director_name(name, movies_collection[index])
    
    index += 1
  end
  result
  
end


# want: [{movie with director_name key}, {movie2 with director_name key}]


def gross_per_studio(collection)
  # GOAL: [{movie1}, {movie2}, ...]
  Given an Array of Hashes where each Hash represents a movie,
  # return a Hash that includes the total worldwide_gross of all the movies from
  # each studio.
  #
  # INPUT:
  # * collection: Array of Hashes where each Hash where each Hash represents a movie
  #
  # RETURN: {:studio_name => sum_total
  #
  # Hash whose keys are the studio names and whose values are the sum
  # total of all the worldwide_gross numbers for every movie in the input 
  
  return = {}
  
  
end











def movies_with_directors_set(source)
#source = [{:name, :movies}, {:name, :movies}, ...]
#result = [[:title, :studio, :director_name], [:title, :studio, :director_name], ...]
  
  # GOAL: For each director, find their :movies Array and stick it in a new Array
  #
  # RETURN:
  #
  # Array of Arrays containing all of a director's movies. Each movie will need
  # to have a :director_name key added to it.
  
result = []
index = 0
  while index < source.length do 
    result << movies_with_director_key(source[index][:name], source[index][:movies])
    
    index += 1
    
  end 
  result
end

